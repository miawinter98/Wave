@using System.Globalization
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Options
@using Vite.AspNetCore
@using Wave.Data

@inject IViteManifest ViteManifest
@inject IOptions<Customization> Customizations

<!DOCTYPE html>
<html lang="@CultureInfo.CurrentUICulture.ToString()" data-theme="@(UserTheme ?? Customizations.Value.DefaultTheme)">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<base href="/">
	<link rel="stylesheet" href="/dist/@(ViteManifest["css/main.css"]?.File ?? "css/main.css")">

	<!-- #region favicon + manifest -->
	@if (!string.IsNullOrWhiteSpace(Customizations.Value.IconLink)) {
		<link rel="icon" href="@Customizations.Value.IconLink">
	} else {
		<link rel="apple-touch-icon" sizes="57x57" href="/dist/apple-icon-57x57.png">
		<link rel="apple-touch-icon" sizes="60x60" href="/dist/apple-icon-60x60.png">
		<link rel="apple-touch-icon" sizes="72x72" href="/dist/apple-icon-72x72.png">
		<link rel="apple-touch-icon" sizes="76x76" href="/dist/apple-icon-76x76.png">
		<link rel="apple-touch-icon" sizes="114x114" href="/dist/apple-icon-114x114.png">
		<link rel="apple-touch-icon" sizes="120x120" href="/dist/apple-icon-120x120.png">
		<link rel="apple-touch-icon" sizes="144x144" href="/dist/apple-icon-144x144.png">
		<link rel="apple-touch-icon" sizes="152x152" href="/dist/apple-icon-152x152.png">
		<link rel="apple-touch-icon" sizes="180x180" href="/dist/apple-icon-180x180.png">
		<link rel="icon" type="image/png" sizes="192x192"  href="/dist/android-icon-192x192.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/dist/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="96x96" href="/dist/favicon-96x96.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/dist/favicon-16x16.png">
	}
	<link rel="manifest" href="/dist/manifest.json">
	<meta name="msapplication-TileColor" content="#ffffff">
	<meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
	<meta name="theme-color" content="#ffffff">
	<!-- #endregion -->
	
	<HeadOutlet />
</head>

<body>
<CascadingValue Value="UserTheme" Name="UserTheme">
<Routes />
</CascadingValue>
	<script src="_framework/blazor.web.js" defer></script>
	<SectionOutlet SectionName="scripts" />
	<script>
		charactersLeft_onInput = function(input) {
			const maxLength = input.maxLength;
			const currentLength = input.value.length;

			const newLeft = maxLength - currentLength;

			let elem = input.parentNode.querySelector(".characters-left");
			if (elem) {
				elem.innerText = newLeft;
			} else {
				input.parentNode.classList.add("relative");
				elem = document.createElement("span");
				elem.classList.add("characters-left");
				elem.innerText = newLeft;
				input.parentNode.appendChild(elem);
			}
		}

		window.insertBeforeSelection = function (markdown, startOfLine = false) {
			const target = document.getElementById("tool-target");

			const start = target.selectionStart;
			const end = target.selectionEnd;
			const value = target.value;
			let doStart = start;
			if (startOfLine) {
				doStart = value.lastIndexOf("\n", start) + 1;
			}

			target.focus();
			target.value = value.substring(0, doStart) + markdown + value.substring(doStart);

			target.selectionStart = start + markdown.length;
			target.selectionEnd = end + markdown.length;
			target.focus();
			target.dispatchEvent(new Event("input", { bubbles: true }));
		}

		window.insertBeforeAndAfterSelection = function (markdown) {
			const target = document.getElementById("tool-target");

			while (/\s/.test(target.value[target.selectionStart]) && target.selectionStart < target.value.length) {
				target.selectionStart++;
			}
			while (/\s/.test(target.value[target.selectionEnd - 1]) && target.selectionEnd > 0) {
				target.selectionEnd--;
			}

			const start = target.selectionStart;
			const end = target.selectionEnd;
			const value = target.value;

			target.focus();
			target.value = value.substring(0, start) +
				markdown + value.substring(start, end) + markdown +
				value.substring(end);

			target.selectionStart = start + markdown.length;
			target.selectionEnd = end + markdown.length;
			target.focus();
			target.dispatchEvent(new Event("input", { bubbles: true }));
		}
	</script>
</body>

</html>

@code {
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	private string? UserTheme { get; set; }
	
	protected override void OnInitialized() {
		HttpContext?.Response.Cookies.Append(
			CookieRequestCultureProvider.DefaultCookieName,
			CookieRequestCultureProvider.MakeCookieValue(
				new RequestCulture(
					CultureInfo.CurrentCulture,
					CultureInfo.CurrentUICulture)), new CookieOptions {
				Expires = DateTimeOffset.UtcNow.AddYears(1), 
				IsEssential = true, 
				SameSite = SameSiteMode.Strict
			});

		if (HttpContext?.Request.Cookies.ContainsKey(".Wave.Theme") is true) {
			HttpContext.Request.Cookies.TryGetValue(".Wave.Theme", out string? theme);
			UserTheme = theme;
		}
	}
}